The etl_wiz mapping language is used to specify remappings and conversions.

The idea here is users may need to remap input data to output forms.  Here's
an example:

Let's assume an input looks like

"","whatever","foo","bar","12345","something","gregk","foo.com"

[output-map]
mytable: col1 col2 col3 othercol lastcol

skip_row: $1 == 'IGNOREME' or $2 == 'DONTCARE';

col1: if($1 != '', $1, NULL);  -- a NULL if $1 is empty, otherwise use it.
col2: concat($3,'-',$4); -- outputs 'foo-bar' if $3 is foo and $4 is bar
col3: $5; -- use the value in $5 no matter what
othercol: default; -- use the DEFAULT value without qualification.
lastcol: concat($6,'@',$7);

The INSERT statement will look like

INSERT INTO mytable (col1, col2, col3, othercol, lastcol)
   VALUES (NULL, 'foo-bar', '12345', default, 'gregk@foo.com');


lastcol: concat($6, '@', $7); 

Referring to input data:

-- is a comment, as it is in SQL.

Input data is either in ASCII or UTF-8.  I may extend etl_wiz to support 
UTF-16 (Windows-friendly) format later if there is demand for them.

Input data is referred to using $1 to $<maxcols>, so a seven-column CSV file
will have its first column referred to as $1, its second as $2, and its
seventh as $7.

Input operators

Comparison operators

=, <>, IS [NOT] NULL - same meaning as SQL
<=, >= - string comparison operators.  Strings are compared as bytes

Input functions

'literal' - represents a string value.  Note that '' represents the empty
string.

concat(v1, v2, ..., vN) - evaluates to the string concatenation of the
arguments, evaluated left to right, ie

concat('hello',' ','world') evaluates to 
'hello world'

substr(arg1, start, end) - same meaning as SQL.  start and end refer to 
character positions interpreted as ASCII/UTF-8.

if(boolean-expression, true-expression, false-expression)

evaluates to true-expresion if expression evaluates to TRUE, otherwise
false-expression.  

ifnull(expression, if-null-expression)

evaluates to expression if it is NOT NULL, and if-null-expression if not

case(source-expression, equal-exp-1, true-exp-1, ...,
                        equal-exp-N, true-exp-N, all-false-exp)

evaluates its expressions.  If the first one is equal, evaluates to true-exp-1,
If not, evaluates other expressions, left-to-right.  If none are equal, 
case evaluates to the all-false-expression.

Boolean expressions and operators:



Special output expressions

DEFAULT - causes the word DEFAULT to appear in the INSERT statement.  This 
          should cause the DB engine to use the column's DEFAULT value for the
          actual INSERTed value in the table.
NULL - causes the word NULL to appear in the INSERT statement.  Assuming this
       isn't an error (ie, no NOT NULL constraint), this will result in the
       column being set to NULL upon INSERT.
